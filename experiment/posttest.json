{
  "version": 2.0,
  "questions": [
    {
      "question": "What is the syntax for passing arguments to a function in Python?",
      "answers": {
        "a": "def function_name(arguments)",
        "b": "def function_name(argument1, argument2, ...)",
        "c": "def function_name()",
        "d": "None of the above"
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "What is a default argument in Python?",
      "answers": {
        "a": " An argument that is mandatory to pass while calling a function",
        "b": "An argument that has a default value, which is used if the value is not provided in the function call",
        "c": "An argument that can be passed in any order",
        "d": "None of the above"
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "What is a keyword argument in Python?",
      "answers": {
        "a": "An argument that is mandatory to pass while calling a function",
        "b": " An argument that has a default value, which is used if the value is not provided in the function call",
        "c": "An argument that can be passed in any order",
        "d": "An argument that is identified by its parameter name in the function call"
      },
      "correctAnswer": "d",
      "difficulty": "beginner"
    },
    {
      "question": "What happens if the number of arguments passed to a function does not match with the number of arguments defined in the function signature?",
      "answers": {
        "a": "A TypeError is raised",
        "b": "The function ignores the extra arguments",
        "c": "The function assumes default values for the missing arguments",
        "d": "All of the above"
      },
      "correctAnswer": "a",
      "difficulty": "beginner"
    },
    {
      "question": "How can you pass an arbitrary number of arguments to a function in Python?",
      "answers": {
        "a": "By using a list as an argument",
        "b": "By using a dictionary as an argument",
        "c": "By using a tuple preceded by a *(star) as an argument",
        "d": "All of the above"
      },
      "correctAnswer": "c",
      "difficulty": "beginner"
    },
    {
      "question": "Which of the following is an example of a default argument in Python?",
      "answers": {
        "a": "def function_name(argument1, argument2)",
        "b": "def function_name(argument1='value1', argument2='value2')",
        "c": "def function_name(argument1, argument2='value1')",
        "d": "def function_name(argument1='value1', argument2)"
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the output of the following code snippet?\ndef function_name(a, b=10, c=20):\n  print(a + b + c)\n\nfunction_name(5,15)",
      "answers": {
        "a": "TypeError",
        "b": "30",
        "c": "40",
        "d": "None of the above"
      },
      "correctAnswer": "c",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the purpose of arbitrary arguments in Python?",
      "answers": {
        "a": "To pass a fixed number of arguments to a function",
        "b": "To pass a variable number of arguments to a function",
        "c": "To pass keyword arguments to a function",
        "d": "All of the above"
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the output of the following code snippet?\ndef my_fun(a, b, *args):\n    print(a, b, args)\n\nmy_fun(1,2,3,4,5,6)",
      "answers": {
        "a": "It will throw an Error",
        "b": "1 2 (3, 4, 5, 6)",
        "c": "1 2 [3, 4, 5,6]",
        "d": "1 2 3 4 5 6"
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "Which of the following statements is true about required arguments in Python functions?",
      "answers": {
        "a": "Required arguments must always be passed while calling a function",
        "b": "Required arguments can have default values",
        "c": "Required arguments are identified by their parameter name in the function call.",
        "d": "None of the above"
      },
      "correctAnswer": "d",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the output of the following code snippet?\ndef my_fun(a, b, **kwargs):\n    print(a, b, kwargs)\n\nmy_fun(1,2, x=10, y=20)",
      "answers": {
        "a": "1 2 {'x': 10, 'y': 20}",
        "b": "TypeError",
        "c": "1 2 {'**kwargs': {'x': 10, 'y': 20}}",
        "d": "None of the Above"
      },
      "correctAnswer": "a",
      "difficulty": "Advanced"
    },
    {
      "question": "Can default arguments be changed in a function in Python?",
      "answers": {
        "a": " Yes, default arguments can be changed within a function ",
        "b": " No, default arguments cannot be changed within a function. ",
        "c": " Default arguments cannot be changed once they are set. ",
        "d": "None of the Above"
      },
      "correctAnswer": "a",
      "difficulty": "Advanced"
    },
    {
      "question": "What is the output of the following code snippet?\ndef my_fun(a, b, c=10, d=20, *args, **kwargs):\n    print(a, b, c, d, args, kwargs)\n\nmy_fun(1,2,3,4,5,6, x=7, y=8) ",
      "answers": {
        "a": " 1 2 3 4 (5, 6) {'x': 7, 'y': 8} ",
        "b": "TypeError",
        "c": "1 2 3 4 5 6 7 8",
        "d": "None of the Above"
      },
      "correctAnswer": "a",
      "difficulty": "Advanced"
    },
    {
      "question": "What is the output of the following code snippet?\ndef my_func(a, b=1, c=2):\n    return a + b + c\n\nargs = [4,5]\nprint(my_func(*args))",
      "answers": {
        "a": "11 ",
        "b": "TypeError",
        "c": "10",
        "d": "TypeError: my_func() missing 1 required positional argument: 'c'"
      },
      "correctAnswer": "a",
      "difficulty": "Advanced"
    },
    {
      "question": "What is the purpose of the double asterisk (**) before an argument in a Python function definition?",
      "answers": {
        "a": "It allows the argument to accept multiple values as a tuple.",
        "b": "It allows the argument to accept keyword arguments as a dictionary.",
        "c": "It allows the argument to accept multiple values as a list.",
        "d": "It allows the argument to accept a single value as a string."
      },
      "correctAnswer": "b",
      "difficulty": "Advanced"
    }
  ]
}